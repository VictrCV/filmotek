openapi: 3.0.2
info:
  title: 'Filmotek REST API'
  version: 1.0.0
servers:
  - url: '{schema}://{servername}:{port}/api/v1'
    description: 'Filmotek server (uses live data)'
    variables:
      schema:
        enum:
          - http
          - https
        default: http
      servername:
        default: 127.0.0.1
      port:
        default: '8000'
tags:
  - name: 'üë• Users'
    description: 'User management'
  - name: 'üéûÔ∏è Series'
    description: 'Series management'
  - name: 'üóÉÔ∏èÔ∏è Series list'
    description: 'Series list management'
paths:
  /users:
    post:
      tags: [ 'üë• Users' ]
      summary: Creates a User resource.
      description: 'Creates a new user'
      operationId: user_api_post
      security:
        - FilmotekApiSecurity: [ ]
      requestBody:
        $ref: '#/components/requestBodies/UserRequestBody'
      responses:
        '201':
          description: '`Created`: user created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          headers:
            Location:
              $ref: '#/components/headers/Location'
        '400':
          $ref: '#/components/responses/400_BadRequest_Response_Users'
        '422':
          $ref: '#/components/responses/422_UnprocessableEntity_Response'
    options:
      tags: [ 'üë• Users' ]
      summary: Provides the list of HTTP supported methods.
      description: 'Return a `Allow` header with a comma separated list of HTTP supported methods.'
      operationId: user_api_options
      responses:
        '204':
          description: '`Allow` header &lt;Response body is empty&gt;'
          headers:
            Allow:
              $ref: '#/components/headers/Allow'
  /users/login:
    post:
      tags: [ 'üë• Users' ]
      summary: Returns Filmotek api token.
      description: 'Returns Filmotek api authorization token (JWT).'
      operationId: user_api_login
      requestBody:
        $ref: '#/components/requestBodies/UserRequestBody'
      responses:
        '200':
          description: '_User access token_'
          headers:
            Authorization:
              description: 'Authorization header with access token'
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  token_type: { description: 'Bearer', type: string }
                  access_token: { description: 'JSON web token', type: string }
                  expires_in: { description: 'Expiration time (in seconds)', type: integer }
              examples:
                example-1:
                  value:
                    token_type: Bearer
                    access_token: <JSON web token>
                    expires_in: 7200
          links:
            AllEndPoints:
              operationId: '*'
              parameters:
                token: '$response.body#/access_token'
              description: 'The `access_token` value returned in the response must be appended to the `Authorization: Bearer ` header in all operations.'
        '422':
          $ref: '#/components/responses/422_UnprocessableEntity_Response'
  /series:
    post:
      tags: [ 'üéûÔ∏è Series' ]
      summary: Creates a Series resource.
      description: 'Creates a new series'
      operationId: series_api_post
      security:
        - FilmotekApiSecurity: [ ]
      requestBody:
        $ref: '#/components/requestBodies/SeriesRequestBody'
      responses:
        '201':
          description: '`Created`: series created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Series'
          headers:
            Location:
              $ref: '#/components/headers/Location'
        '400':
          $ref: '#/components/responses/400_BadRequest_Response_Series'
        '422':
          $ref: '#/components/responses/422_UnprocessableEntity_Response'
    options:
      tags: [ 'üéûÔ∏è Series' ]
      summary: Provides the list of HTTP supported methods.
      description: 'Return a `Allow` header with a comma separated list of HTTP supported methods.'
      operationId: series_api_options
      responses:
        '204':
          description: '`Allow` header &lt;Response body is empty&gt;'
          headers:
            Allow:
              $ref: '#/components/headers/Allow'
  /series/apiId/{apiId}:
    parameters:
      - $ref: '#/components/parameters/apiId'
    get:
      tags: [ 'üéûÔ∏è Series' ]
      summary: Retrieves a Series resource based on its apiId.
      description: 'Returns the result identified by `apiId`.'
      operationId: series_api_get_by_api_id
      security:
        - FilmotekApiSecurity: [ ]
      responses:
        '200':
          description: Series
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Series'
          headers:
            Location:
              $ref: '#/components/headers/Location'
        '404':
          $ref: '#/components/responses/404_Resource_Not_Found_Response'
  /series-list:
    post:
      tags: [ 'üóÉÔ∏èÔ∏è Series list' ]
      summary: Creates a Series list resource.
      description: 'Creates a new series list'
      operationId: series_list_api_post
      security:
        - FilmotekApiSecurity: [ ]
      requestBody:
        $ref: '#/components/requestBodies/SeriesListRequestBody'
      responses:
        '201':
          description: '`Created`: series list created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeriesList'
          headers:
            Location:
              $ref: '#/components/headers/Location'
        '400':
          $ref: '#/components/responses/400_BadRequest_Response_SeriesList_Post'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '422':
          $ref: '#/components/responses/422_UnprocessableEntity_Response'
    options:
      tags: [ 'üóÉÔ∏èÔ∏è Series list' ]
      summary: Provides the list of HTTP supported methods.
      description: 'Return a `Allow` header with a comma separated list of HTTP supported methods.'
      operationId: series_list_api_options
      responses:
        '204':
          description: '`Allow` header &lt;Response body is empty&gt;'
          headers:
            Allow:
              $ref: '#/components/headers/Allow'
  /series-list/user/{userId}:
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/typeQuery'
      - $ref: '#/components/parameters/seriesIdQuery'
    get:
      tags: [ 'üóÉÔ∏èÔ∏è Series list' ]
      summary: Retrieves a Series list resource based on its user.
      description: 'Returns the result identified by `user` and, optionally, by `type` and/or `series`.'
      operationId: series_list_api_get_by_user
      security:
        - FilmotekApiSecurity: [ ]
      responses:
        '200':
          description: SeriesList
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Series'
          headers:
            Location:
              $ref: '#/components/headers/Location'
        '404':
          $ref: '#/components/responses/404_Resource_Not_Found_Response'
  /series-list/{seriesListId}:
    parameters:
      - $ref: '#/components/parameters/seriesListId'
    put:
      tags: [ 'üóÉÔ∏èÔ∏è Series list' ]
      summary: Updates the Series list resource.
      description: 'Updates the series list identified by `seriesListId`.'
      operationId: series_list_api_put
      security:
        - FilmotekApiSecurity: [ ]
      requestBody:
        $ref: '#/components/requestBodies/SeriesListRequestBody'
      responses:
        '200':
          description: SeriesList
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeriesList'
          headers:
            Location:
              $ref: '#/components/headers/Location'
        '400':
          $ref: '#/components/responses/400_BadRequest_Response_SeriesList_Put'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '404':
          $ref: '#/components/responses/404_Resource_Not_Found_Response'
components:
  headers:
    Location:
      description: "`URI` of the new resource"
      schema: { type: string, format: url }
    Allow:
      description: List of HTTP supported methods
      schema: { type: string }
  schemas:
    User:
      type: object
      properties:
        id:
          description: 'User Id'
          type: integer
          format: int64
        username:
          description: 'User username'
          type: string
          format: string
        _links:
          description: link relations
          type: object
          properties:
            parent:
              type: object
              properties: { "href": { "type": "string", "format": "url" } }
            self:
              type: object
              properties: { "href": { "type": "string", "format": "url" } }
      example:
        user:
          id: 1508
          username: 'fulanito90'
          _links:
            parent:
              href: /api/v1/users
            self:
              href: /api/v1/users/1508
    Series:
      type: object
      properties:
        id:
          description: 'Series Id'
          type: integer
          format: int64
        apiId:
          description: 'Series apiId'
          type: string
          format: string
        title:
          description: 'Series title'
          type: string
          format: string
        isFilm:
          description: 'Series isFilm'
          type: boolean
          format: boolean
        synopsis:
          description: 'Series synopsis'
          type: string
          format: string
        imageUrl:
          description: 'Series imageUrl'
          type: string
          format: string
        _links:
          description: link relations
          type: object
          properties:
            parent:
              type: object
              properties: { "href": { "type": "string", "format": "url" } }
            self:
              type: object
              properties: { "href": { "type": "string", "format": "url" } }
      example:
        series:
          id: 1212
          apiId: 'tt0944947'
          title: 'Game of Thrones'
          isFilm: false
          synopsis: 'Nine noble families fight for control over the lands of Westeros, while an ancient enemy returns after being dormant for millennia.'
          imageUrl: 'https://m.media-amazon.com/images/M/MV5BYTRiNDQwYzAtMzVlZS00NTI5LWJjYjUtMzkwNTUzMWMxZTllXkEyXkFqcGdeQXVyNDIzMzcwNjc@._V1_.jpg'
          _links:
            parent:
              href: /api/v1/series
            self:
              href: /api/v1/series/1202
    SeriesList:
      type: object
      properties:
        id:
          description: 'Series list Id'
          type: integer
          format: int64
        type:
          description: 'Series list type'
          type: string
          format: string
        seriesId:
          description: 'Series list series Id'
          type: integer
          format: int64
        userId:
          description: 'Series list user Id'
          type: integer
          format: int64
        season:
          description: 'Series season'
          type: integer
          format: int32
        episode:
          description: 'Series episode'
          type: integer
          format: int32
        time:
          description: 'Series time'
          type: string
          format: date-time
        _links:
          description: link relations
          type: object
          properties:
            parent:
              type: object
              properties: { "href": { "type": "string", "format": "url" } }
            self:
              type: object
              properties: { "href": { "type": "string", "format": "url" } }
      example:
        series:
          id: 33
          type: 'favourites'
          seriesId: 52
          userId: 17
          season: 3
          episode: 9
          time: '00:35:00'
          _links:
            parent:
              href: /api/v1/series-list
            self:
              href: /api/v1/series-list/33
    Message:
      type: object
      description: HTTP response message
      properties:
        code:
          description: 'Response code'
          type: integer
          format: int64
        message:
          description: 'Response message'
          type: string
      example:
        code: 200
        message: Ok
  responses:
    400_BadRequest_Response_Users:
      description: "`BAD REQUEST`: username already exists"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
          examples:
            response-400-user:
              $ref: '#/components/examples/response-400-user'
    400_BadRequest_Response_Series:
      description: "`BAD REQUEST`: series already exists"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
          examples:
            response-400-series:
              $ref: '#/components/examples/response-400-series'
    400_BadRequest_Response_SeriesList_Post:
      description: "`BAD REQUEST`: wrong type, series or user does not exist, or series already exists in list"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
          examples:
            response-400-series-list:
              $ref: '#/components/examples/response-400-series-list'
    400_BadRequest_Response_SeriesList_Put:
      description: "`BAD REQUEST`: wrong type or series does not exist"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
          examples:
            response-400-series-list:
              $ref: '#/components/examples/response-400-series-list'
    401_Unauthorized_Response:
      description: '`Unauthorized`: invalid Authorization header'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
          examples:
            response-401:
              $ref: '#/components/examples/response-401'
    403_Forbidden_Response:
      description: '`Forbidden`: you don''t have permission to access'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
          examples:
            response-403:
              $ref: '#/components/examples/response-403'
    404_Resource_Not_Found_Response:
      description: '`Not found`: resource not found'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
          examples:
            response-404:
              $ref: '#/components/examples/response-404'
    412_Precondition_Failed_Response:
      description: '`PRECONDITION FAILED`: one or more conditions given evaluated to false'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
          examples:
            response-412:
              $ref: '#/components/examples/response-412'
    422_UnprocessableEntity_Response:
      description: "`UNPROCESSABLE ENTITY`: Missing data."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
          examples:
            response-422:
              $ref: '#/components/examples/response-422'
  requestBodies:
    UserRequestBody:
      description: '`User` data'
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                description: 'User username'
                type: string
                format: string
              password:
                description: 'User password'
                type: string
                format: password
            example:
              username: fulanito90
              password: Us3rP4ssw0rd
    SeriesRequestBody:
      description: '`Series` data'
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              apiId:
                description: 'Series apiId'
                type: string
                format: string
              title:
                description: 'Series title'
                type: string
                format: string
              isFilm:
                description: 'Series isFilm'
                type: boolean
                format: boolean
              synopsis:
                description: 'Series synopsis'
                type: string
                format: string
              imageUrl:
                description: 'Series imageUrl'
                type: string
                format: string
            example:
              apiId: 'tt0944947'
              title: 'Game of Thrones'
              isFilm: false
              synopsis: 'Nine noble families fight for control over the lands of Westeros, while an ancient enemy returns after being dormant for millennia.'
              imageUrl: 'https://m.media-amazon.com/images/M/MV5BYTRiNDQwYzAtMzVlZS00NTI5LWJjYjUtMzkwNTUzMWMxZTllXkEyXkFqcGdeQXVyNDIzMzcwNjc@._V1_.jpg'
    SeriesListRequestBody:
      description: '`Series list` data'
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              type:
                description: 'Series list type'
                type: string
                format: string
              seriesId:
                description: 'Series list series Id'
                type: integer
                format: int64
              userId:
                description: 'Series list user Id'
                type: integer
                format: int64
              season:
                description: 'Series season'
                type: integer
                format: int32
              episode:
                description: 'Series episode'
                type: integer
                format: int32
              time:
                description: 'Series time'
                type: string
                format: date-time
            example:
              type: favourites
              seriesId: 52
              userId: 17
              season: 3
              episode: 9
              time: '00:35:00'
  parameters:
    apiId:
      name: apiId
      in: path
      description: 'apiId of Series'
      required: true
      schema: { "type": "string", pattern: '^tt\d{7}$' }
    userId:
      name: userId
      in: path
      description: 'user Id'
      required: true
      schema: { "type": "integer", pattern: '^\d+$' }
    seriesListId:
      name: seriesListId
      in: path
      description: 'series list Id'
      required: true
      schema: { "type": "integer", pattern: '^\d+$' }
    typeQuery:
      name: type
      in: query
      description: 'type'
      required: false
      schema: { "type": "string", pattern: '^[A-Za-z]{7,10}$' }
    seriesIdQuery:
      name: series
      in: query
      description: 'series Id'
      required: false
      schema: { "type": "integer", pattern: '^\d+$' }
  examples:
    response-400-user:
      value:
        code: 400
        message: 'BAD REQUEST: Username already exists.'
    response-400-series:
      value:
        code: 400
        message: 'BAD REQUEST: Series already exists.'
    response-400-series-list:
      value:
        code: 400
        message: 'BAD REQUEST: Wrong type.'
    response-401:
      value:
        code: 401
        message: 'UNAUTHORIZED: invalid Authorization header'
    response-403:
      value:
        code: 403
        message: "FORBIDDEN You don't have permission to access"
    response-404:
      value:
        code: 404
        message: 'NOT FOUND: Resource not found'
    response-412:
      value:
        code: 412
        message: 'PRECONDITION FAILED: one or more conditions given evaluated to false'
    response-422:
      value:
        code: 422
        message: 'UNPROCESSABLE ENTITY: Missing data.'
  securitySchemes:
    FilmotekApiSecurity:
      type: http
      bearerFormat: JWT
      scheme: bearer